/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Lock {
  export type ProjectStruct = {
    owner: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    goal: PromiseOrValue<BigNumberish>;
    currentValue: PromiseOrValue<BigNumberish>;
    image: PromiseOrValue<string>;
    investors: PromiseOrValue<string>[];
    investments: PromiseOrValue<BigNumberish>[];
  };

  export type ProjectStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string[],
    BigNumber[]
  ] & {
    owner: string;
    title: string;
    description: string;
    deadline: BigNumber;
    goal: BigNumber;
    currentValue: BigNumber;
    image: string;
    investors: string[];
    investments: BigNumber[];
  };
}

export interface LockInterface extends utils.Interface {
  functions: {
    "createProject(address,string,string,uint256,uint256,string)": FunctionFragment;
    "getInvestors(uint256)": FunctionFragment;
    "getProjects()": FunctionFragment;
    "investToProject(uint256)": FunctionFragment;
    "numberOfProjects()": FunctionFragment;
    "projects(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createProject"
      | "getInvestors"
      | "getProjects"
      | "investToProject"
      | "numberOfProjects"
      | "projects"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investToProject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investToProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;

  events: {};
}

export interface Lock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProject(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _goal: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInvestors(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getProjects(
      overrides?: CallOverrides
    ): Promise<[Lock.ProjectStructOutput[]]>;

    investToProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfProjects(overrides?: CallOverrides): Promise<[BigNumber]>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, string] & {
        owner: string;
        title: string;
        description: string;
        deadline: BigNumber;
        goal: BigNumber;
        currentValue: BigNumber;
        image: string;
      }
    >;
  };

  createProject(
    _owner: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    _goal: PromiseOrValue<BigNumberish>,
    _image: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInvestors(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getProjects(overrides?: CallOverrides): Promise<Lock.ProjectStructOutput[]>;

  investToProject(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfProjects(overrides?: CallOverrides): Promise<BigNumber>;

  projects(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, string] & {
      owner: string;
      title: string;
      description: string;
      deadline: BigNumber;
      goal: BigNumber;
      currentValue: BigNumber;
      image: string;
    }
  >;

  callStatic: {
    createProject(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _goal: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvestors(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getProjects(overrides?: CallOverrides): Promise<Lock.ProjectStructOutput[]>;

    investToProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    numberOfProjects(overrides?: CallOverrides): Promise<BigNumber>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, string] & {
        owner: string;
        title: string;
        description: string;
        deadline: BigNumber;
        goal: BigNumber;
        currentValue: BigNumber;
        image: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    createProject(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _goal: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInvestors(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjects(overrides?: CallOverrides): Promise<BigNumber>;

    investToProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfProjects(overrides?: CallOverrides): Promise<BigNumber>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createProject(
      _owner: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      _goal: PromiseOrValue<BigNumberish>,
      _image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInvestors(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investToProject(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
